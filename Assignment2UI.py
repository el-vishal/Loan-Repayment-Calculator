#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 08, 2019 05:38:03 AM GMT  platform: Windows NT

from tkinter import *
from tkinter import messagebox

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

#import Assignment2UI_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    #Assignment2UI_support.set_Tk_var()
    top = MainFrame(root)
    #Assignment2UI_support.init(root, top)
    root.mainloop()


w = None


def create_MainFrame(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    #Assignment2UI_support.set_Tk_var()
    top = MainFrame(w)
    #Assignment2UI_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_MainFrame():
    global w
    yesno = messagebox.askyesno("Confirm Exit", "Are you sure want to exit?")
    if yesno == True:
        w.destroy()
    w = None


class MainFrame:

    def inputChecker(self):
        try:
            amount = float(self.LoanAmountEntry.get())
            interest = float(self.InterestRateEntry.get())
            period = int(self.PeriodEntry.get())
            periodType = str(self.PeriodComboBox.get())

        except:
            amount = 0
            interest = 1
            period = 1
            periodType = "Months"

            messagebox.showerror("Input Error!", "Please enter numerical values!")
            self.reset()

        return (amount, interest/100, period, periodType)

    def reset(self):
        self.LoanAmountEntry.delete(0, tk.END)
        self.InterestRateEntry.delete(0, tk.END)
        self.PeriodEntry.delete(0, tk.END)
        self.PeriodComboBox.delete(0, tk.END)
        self.PaymentEntry.delete(0, tk.END)
        x = self.PaymentTree.get_children()
        for item in x: self.PaymentTree.delete(item)
        self.PeriodComboBox.set("Months")
        the_message = "The values have been reset."
        self.status_update(the_message)

    def status_update(self, the_message: str):
        self.Status.config(text=the_message)

    def gettingStarted(self):
        title = "Introductory Information"
        text = "Please enter the parameters and press Calculate button. The Monthly Payment " \
               "and Payment Schedule will be shown below.  \n" \
               " \n" \
               "IMPORTANT! Interest rate must be annual (yearly) interest rate. Period " \
               "type must be selected either Montly or Yearly before calculation. Otherwise" \
               "input parameters will be reset. \n" \
               " \n" \
               "Inputs:     \n" \
               " - Loan Amount: Any type of number (e.g. 1000, 50000 etc.)\n" \
               " - Annual Interest Rate (%): Decimal type (e.g. 1.5%, 5% etc.) \n" \
               " - Period: Integer type (e.g. 12, 60, 120 etc.)  \n" \
               " - Period Type: Months or Years \n" \
               " \n" \
               "Outputs:   \n" \
               " - Monthly Payment: The payment amount will be paid monthly. \n" \
               " - Payment No: The order of the payments \n" \
               " - Payment Amount: The monthly payment amount \n" \
               " - Principal Amount: Principal amount in the monthly payment \n" \
               " - Interest Amount: Interest amount in the monthly payment \n" \
               " - Outstanding Balance: The rest of amount after the payment has been done \n" \
               " \n"

        messagebox.showinfo(title, text)

    def about(self):
        title = "About Calculator"
        text = "  Constant Payment Loan Calculator  ver 1.0  \n" \
               " \n" \
               "               Written by Seckin Tataroglu       \n" \
               "                  st430@student.le.ac.uk         \n" \
               " \n" \
               "       Copyright (C) Seckin Tataroglu 2018   \n" \
               " \n" \
               " \n" \
               "  DABI MSc Student, University of Leicester \n" \
               "                            189035369       \n" \
               " \n"

        messagebox.showinfo(title, text)

    def mortgage(self, amount: float, interest: float, period: int):

        interest = interest / 12
        monthlyPayment = ((amount * interest * ((1 + interest) ** period)) / (((1 + interest) ** period) - 1))

        return monthlyPayment

    def paymentSchedule(self):
        inputs = self.inputChecker()
        self.PaymentEntry.delete(0, tk.END)
        x = self.PaymentTree.get_children()
        for item in x: self.PaymentTree.delete(item)

        amount = inputs[0]
        interest = inputs[1]
        period = inputs[2]
        periodType = inputs[3]


        # Period Check
        if periodType == "Years":
            period = period * 12
        elif periodType == "Months":
            period = period
        else:
            self.reset()

        Month = []
        Principal = []
        Interest = []
        Balance = []



        monthlyPayment = self.mortgage(amount, interest, period)

        interest = interest / 12
        paymentTotal = 0
        interestTotal = 0
        principalTotal = 0

        for i in range(period):
            intPayment = (amount * interest)
            principalPayment = (monthlyPayment - intPayment)
            balancePayment = (amount - principalPayment)

            # Sum Updates
            paymentTotal = paymentTotal + monthlyPayment
            interestTotal = interestTotal + intPayment
            principalTotal = principalTotal + principalPayment

            # Appending Lists
            Month.append(i + 1)
            Principal.append(principalPayment)
            Interest.append(intPayment)
            if balancePayment < 1:
                Balance.append(0.0)
            else:
                Balance.append(balancePayment)

            amount = balancePayment

        if paymentTotal != 0:
            self.PaymentEntry.insert(0, round(monthlyPayment,2))
            for j in range(len(Month)):
                self.PaymentTree.insert("", "end", text=Month[j], values=(round(monthlyPayment, 2),
                                                                          round(Principal[j], 2),
                                                                          round(Interest[j], 2),
                                                                          round(Balance[j], 2)))

            the_message = "Calculation Completed"
            self.status_update(the_message)


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        screenWidth = 649
        screenHeight = 600
        top.geometry('%dx%d+%d+%d' % (screenWidth, screenHeight, root.winfo_screenwidth() / 2 - screenWidth / 2,
                                      root.winfo_screenheight() / 2 - screenHeight / 2))
        top.title("Loan Payment Calculator")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.inputFrame = ttk.Frame(top)
        self.inputFrame.place(relx=0.046, rely=0.112, relheight=0.252
                              , relwidth=0.917)
        self.inputFrame.configure(relief='groove')
        self.inputFrame.configure(borderwidth="2")
        self.inputFrame.configure(relief='groove')
        self.inputFrame.configure(width=595)

        self.LoanAmountLabel = tk.Label(self.inputFrame)
        self.LoanAmountLabel.place(relx=0.017, rely=0.074, height=31, width=194)
        self.LoanAmountLabel.configure(activebackground="#f9f9f9")
        self.LoanAmountLabel.configure(activeforeground="#000000")
        self.LoanAmountLabel.configure(background="#d9d9d9")
        self.LoanAmountLabel.configure(disabledforeground="#a3a3a3")
        self.LoanAmountLabel.configure(font="-family {Segoe UI} -size 10")
        self.LoanAmountLabel.configure(foreground="#000000")
        self.LoanAmountLabel.configure(highlightbackground="#d9d9d9")
        self.LoanAmountLabel.configure(highlightcolor="black")
        self.LoanAmountLabel.configure(text='''Loan Amount''')
        self.LoanAmountLabel.configure(width=194)

        self.InterestRateLabel = tk.Label(self.inputFrame)
        self.InterestRateLabel.place(relx=0.017, rely=0.37, height=31, width=194)

        self.InterestRateLabel.configure(activebackground="#f9f9f9")
        self.InterestRateLabel.configure(activeforeground="#000000")
        self.InterestRateLabel.configure(background="#d9d9d9")
        self.InterestRateLabel.configure(disabledforeground="#a3a3a3")
        self.InterestRateLabel.configure(font="-family {Segoe UI} -size 10")
        self.InterestRateLabel.configure(foreground="#000000")
        self.InterestRateLabel.configure(highlightbackground="#d9d9d9")
        self.InterestRateLabel.configure(highlightcolor="black")
        self.InterestRateLabel.configure(text='''Annual Interest Rate (%)''')
        self.InterestRateLabel.configure(width=194)

        self.PeriodLabel = tk.Label(self.inputFrame)
        self.PeriodLabel.place(relx=0.017, rely=0.667, height=31, width=194)
        self.PeriodLabel.configure(activebackground="#f9f9f9")
        self.PeriodLabel.configure(activeforeground="#000000")
        self.PeriodLabel.configure(background="#d9d9d9")
        self.PeriodLabel.configure(disabledforeground="#a3a3a3")
        self.PeriodLabel.configure(font="-family {Segoe UI} -size 10")
        self.PeriodLabel.configure(foreground="#000000")
        self.PeriodLabel.configure(highlightbackground="#d9d9d9")
        self.PeriodLabel.configure(highlightcolor="black")
        self.PeriodLabel.configure(text='''Period''')
        self.PeriodLabel.configure(width=194)

        self.LoanAmountEntry = tk.Entry(self.inputFrame)
        self.LoanAmountEntry.place(relx=0.387, rely=0.074, height=30
                                   , relwidth=0.326)
        self.LoanAmountEntry.configure(background="white")
        self.LoanAmountEntry.configure(disabledforeground="#a3a3a3")
        self.LoanAmountEntry.configure(font="-family {Courier New} -size 10")
        self.LoanAmountEntry.configure(foreground="#000000")
        self.LoanAmountEntry.configure(highlightbackground="#d9d9d9")
        self.LoanAmountEntry.configure(highlightcolor="black")
        self.LoanAmountEntry.configure(insertbackground="black")
        self.LoanAmountEntry.configure(selectbackground="#c4c4c4")
        self.LoanAmountEntry.configure(selectforeground="black")
        self.LoanAmountEntry.configure(takefocus="0")
        self.LoanAmountEntry.configure(width=194)

        self.InterestRateEntry = tk.Entry(self.inputFrame)
        self.InterestRateEntry.place(relx=0.387, rely=0.37, height=30
                                     , relwidth=0.326)
        self.InterestRateEntry.configure(background="white")
        self.InterestRateEntry.configure(disabledforeground="#a3a3a3")
        self.InterestRateEntry.configure(font="-family {Courier New} -size 10")
        self.InterestRateEntry.configure(foreground="#000000")
        self.InterestRateEntry.configure(highlightbackground="#d9d9d9")
        self.InterestRateEntry.configure(highlightcolor="black")
        self.InterestRateEntry.configure(insertbackground="black")
        self.InterestRateEntry.configure(selectbackground="#c4c4c4")
        self.InterestRateEntry.configure(selectforeground="black")
        self.InterestRateEntry.configure(takefocus="0")
        self.InterestRateEntry.configure(width=194)

        self.PeriodEntry = tk.Entry(self.inputFrame)
        self.PeriodEntry.place(relx=0.387, rely=0.667, height=30, relwidth=0.326)

        self.PeriodEntry.configure(background="white")
        self.PeriodEntry.configure(disabledforeground="#a3a3a3")
        self.PeriodEntry.configure(font="-family {Courier New} -size 10")
        self.PeriodEntry.configure(foreground="#000000")
        self.PeriodEntry.configure(highlightbackground="#d9d9d9")
        self.PeriodEntry.configure(highlightcolor="black")
        self.PeriodEntry.configure(insertbackground="black")
        self.PeriodEntry.configure(selectbackground="#c4c4c4")
        self.PeriodEntry.configure(selectforeground="black")
        self.PeriodEntry.configure(takefocus="0")
        self.PeriodEntry.configure(width=194)

        # ComboBox
        self.PeriodComboBox = ttk.Combobox(self.inputFrame, values=["Months",
                                                                    "Years"])
        self.PeriodComboBox.place(relx=0.79, rely=0.667, relheight=0.23
                                  , relwidth=0.19)
        self.PeriodComboBox.configure(takefocus="")
        self.PeriodComboBox.set("Months")

        self.LoanPaymentCalculator = tk.Label(top)
        self.LoanPaymentCalculator.place(x=top.winfo_width() / 2, y=top.winfo_width() + 20, relx=0.5, rely=0.019,
                                         height=41
                                         , width=664, anchor=CENTER)
        self.LoanPaymentCalculator.configure(activebackground="#f9f9f9")
        self.LoanPaymentCalculator.configure(activeforeground="#515151")
        self.LoanPaymentCalculator.configure(background="#d9d9d9")
        self.LoanPaymentCalculator.configure(disabledforeground="#a3a3a3")
        self.LoanPaymentCalculator.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.LoanPaymentCalculator.configure(foreground="#000000")
        self.LoanPaymentCalculator.configure(highlightbackground="#d9d9d9")
        self.LoanPaymentCalculator.configure(highlightcolor="black")
        self.LoanPaymentCalculator.configure(text='''Loan Payment Calculator''')
        self.LoanPaymentCalculator.configure(width=664)

        self.Calculate = tk.Button(top)
        self.Calculate.place(relx=0.74, rely=0.393, height=34, width=137)
        self.Calculate.configure(activebackground="#ececec")
        self.Calculate.configure(activeforeground="#000000")
        self.Calculate.configure(background="#d9d9d9")
        self.Calculate.configure(disabledforeground="#a3a3a3")
        self.Calculate.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Calculate.configure(foreground="#000000")
        self.Calculate.configure(highlightbackground="#d9d9d9")
        self.Calculate.configure(highlightcolor="black")
        self.Calculate.configure(pady="0")
        self.Calculate.configure(takefocus="0")
        self.Calculate.configure(text='''Calculate''')
        self.Calculate.configure(width=137)
        self.Calculate.configure(command=self.paymentSchedule)

        self.outputFrame = tk.Frame(top)
        self.outputFrame.place(relx=0.015, rely=0.598, relheight=0.360
                               , relwidth=0.963)
        self.outputFrame.configure(relief='groove')
        self.outputFrame.configure(borderwidth="2")
        self.outputFrame.configure(relief='groove')
        self.outputFrame.configure(background="#d9d9d9")
        self.outputFrame.configure(highlightbackground="#d9d9d9")
        self.outputFrame.configure(highlightcolor="black")
        self.outputFrame.configure(width=625)

        self.style.configure('Treeview.Heading', font="TkDefaultFont")
        self.PaymentTree = ScrolledTreeView(self.outputFrame)
        self.PaymentTree.place(relx=0.016, rely=0.049, relheight=0.863
                               , relwidth=0.976)
        self.PaymentTree.configure(columns=["Col1", "Col2", "Col3", "Col4"])
        # build_treeview_support starting.
        self.PaymentTree.heading("#0", text="Payment No",
                                 anchor="center")
        self.PaymentTree.column("#0", width="50",
                                minwidth="20",
                                stretch="1",
                                anchor="center")
        self.PaymentTree.heading("Col1", text="Payment Amount",
                                 anchor="center")
        self.PaymentTree.column("Col1", width="100",
                                minwidth="20",
                                stretch="1",
                                anchor="center")
        self.PaymentTree.heading("Col2", text="Principal Amount",
                                 anchor="center")
        self.PaymentTree.column("Col2", width="100",
                                minwidth="20",
                                stretch="1",
                                anchor="center")
        self.PaymentTree.heading("Col3", text="Interest Amount",
                                 anchor="center")
        self.PaymentTree.column("Col3", width="100",
                                minwidth="20",
                                stretch="1",
                                anchor="center")
        self.PaymentTree.heading("Col4", text="Outstanding Balance",
                                 anchor="center")
        self.PaymentTree.column("Col4", width="100",
                                minwidth="20",
                                stretch="1",
                                anchor="center")

        self.ScheduleLabel = tk.Label(top)
        self.ScheduleLabel.place(x=top.winfo_width() / 2, y=top.winfo_width() + 11, relx=0.5, rely=0.523, height=21,
                                 width=664, anchor=CENTER)
        self.ScheduleLabel.configure(activebackground="#f9f9f9")
        self.ScheduleLabel.configure(activeforeground="#515151")
        self.ScheduleLabel.configure(background="#d9d9d9")
        self.ScheduleLabel.configure(disabledforeground="#a3a3a3")
        self.ScheduleLabel.configure(font="-family {Segoe UI} -size 13 -weight bold -slant italic")
        self.ScheduleLabel.configure(foreground="#000000")
        self.ScheduleLabel.configure(highlightbackground="#d9d9d9")
        self.ScheduleLabel.configure(highlightcolor="black")
        self.ScheduleLabel.configure(text='''Payments Schedule''')
        self.ScheduleLabel.configure(width=664)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=-0.015, rely=0.486, relwidth=1.032)
        self.TSeparator1.configure(takefocus="0")

        self.PaymentLabel = tk.Label(top)
        self.PaymentLabel.place(relx=0.062, rely=0.393, height=31, width=194)
        self.PaymentLabel.configure(activebackground="#f9f9f9")
        self.PaymentLabel.configure(activeforeground="#000000")
        self.PaymentLabel.configure(background="#d9d9d9")
        self.PaymentLabel.configure(disabledforeground="#a3a3a3")
        self.PaymentLabel.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.PaymentLabel.configure(foreground="#000000")
        self.PaymentLabel.configure(highlightbackground="#d9d9d9")
        self.PaymentLabel.configure(highlightcolor="black")
        self.PaymentLabel.configure(text='''Monthly Payment''')
        self.PaymentLabel.configure(width=194)

        self.PaymentEntry = tk.Entry(top)
        self.PaymentEntry.place(relx=0.401, rely=0.393, height=30
                                , relwidth=0.299)
        self.PaymentEntry.configure(background="white")
        self.PaymentEntry.configure(disabledforeground="#a3a3a3")
        self.PaymentEntry.configure(font="-family {Courier New} -size 10")
        self.PaymentEntry.configure(foreground="#000000")
        self.PaymentEntry.configure(highlightbackground="#d9d9d9")
        self.PaymentEntry.configure(highlightcolor="black")
        self.PaymentEntry.configure(insertbackground="black")
        self.PaymentEntry.configure(selectbackground="#c4c4c4")
        self.PaymentEntry.configure(selectforeground="black")
        self.PaymentEntry.configure(takefocus="0")
        self.PaymentEntry.configure(width=194)

        # Status Bar
        self.Status = Label(root, text="Ready", bd=1, relief=SUNKEN, anchor=W)
        self.Status.pack(side=BOTTOM, fill=X)


        # Menu Settings
        self.menubar = tk.Menu(top, font=('Segoe UI', 9,), bg=_bgcolor
                               , fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkDefaultFont",
                                 foreground="#000000",
                                 label="File")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkDefaultFont",
            foreground="#000000",
            label="New Calculation",
            command=self.reset)
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkDefaultFont",
            foreground="#000000",
            label="Exit",
            command=exit)
        self.sub_menu1 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkDefaultFont",
                                 foreground="#000000",
                                 label="Help")
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkDefaultFont",
            foreground="#000000",
            label="Getting Started",
            command=self.gettingStarted)
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkDefaultFont",
            foreground="#000000",
            label="About",
            command=self.about)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
